generator client {
    provider = "prisma-client-js"
}

generator prisma_generator_trpc {
    provider = "node node_modules/prisma-generator-trpc"
    output   = "../src/server/router/generated"
}

datasource db {
    provider = "postgresql"

    url = env("DATABASE_URL")
}

/// public:[get] 
model Example {
    id        String   @id @default(cuid()) ///  readonly
    email     String   @unique
    name      String?
    createdAt DateTime @default(now()) /// readonly
    password  String? /// private readonly

    user_id String
    user    User   @relation(fields: [user_id], references: [id]) /// private 
}

model Node {
    id         String   @id @default(cuid()) ///  readonly
    title      String?
    created_at DateTime @default(now()) /// readonly
    updated_at DateTime @default(now()) /// readonly
    data       String?

    root_id  String?
    root     Node?   @relation("Noderelation", fields: [root_id], references: [id]) /// private
    children Node[]  @relation("Noderelation") /// private
    sourcer  Edge[]  @relation("toNode") /// private
    targeter Edge[]  @relation("fromNode") /// private

    user_id String
    user    User   @relation(fields: [user_id], references: [id]) /// private
}

model Edge {
    id           String @id @default(cuid()) ///  readonly
    from_node_id String
    from_node    Node   @relation("fromNode", fields: [from_node_id], references: [id]) /// private

    to_node_id String
    to_node    Node   @relation("toNode", fields: [to_node_id], references: [id]) /// private

    user_id String
    user    User   @relation(fields: [user_id], references: [id]) /// private
}

/// ignore
// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

/// ignore
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// ignore
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Example       Example[]
    nodes         Node[]
    edges         Edge[]
}

/// ignore
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
